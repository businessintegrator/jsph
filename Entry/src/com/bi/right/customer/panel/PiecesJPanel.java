/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer.panel;

import com.bi.calendar.dlg.DateChooser;
import com.bi.jsph.model.FileListModel;
import com.bi.right.customer.LoaderStorer;
import com.bi.right.customer.bo.GUIManager;
import com.bi.right.customer.bo.Piece;
import com.bi.right.customer.bo.PiecesTableModel;
import com.bi.right.customer.bo.SousPiece;
import com.bi.right.customer.panel.image.ImageBean;
import com.bi.right.customer.util.renderer.DateCelleEditor;
import com.bi.right.customer.util.renderer.DateCelleRenderer;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableColumn;
import javax.swing.text.Document;
import org.jdesktop.beansbinding.BindingGroup;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.Exceptions;
import org.openide.windows.WindowManager;

/**
 *
 * @author rafaralahitsimba tiaray
 */
public class PiecesJPanel extends AbstractPanel {

    private JFileChooser currentFileChooser = null;
    private JFileChooser addFileChooser = null;
    private final Object LOCK = new Object();
    private AbstractFormatter dateFormater;
    private GUIManager currentDirectory;
    private File lastFile;

    public AbstractFormatter getDateFormater() {
	return dateFormater;
    }

    public void setDateFormater(AbstractFormatter dateFormater) {
	this.dateFormater = dateFormater;
    }

    /**
     * Creates new form PiecesJPanel
     */
    public PiecesJPanel() {
	initComponents();
	this.dateFormater = this.jFormattedTextFieldDate.getFormatter();
	jTableListePieces.getTableHeader().getColumnModel().getColumn(0).setPreferredWidth(60);

	this.jTableListePieces.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	    @Override
	    public void valueChanged(ListSelectionEvent e) {
		if (!e.getValueIsAdjusting()) {
		    synchronized (LOCK) {
			int firstRow = jTableListePieces.getSelectedRow();
			if (firstRow >= 0) {
			    final Piece p = getInternalModel().getPiece(firstRow);
			    if (p != null) {
				jTextFieldLbl.setText(p.getLabel());
				jFormattedTextFieldDate.setValue(p.getStartDate());
				jListPages.setModel(new FileListModel(p.getFiles()));
			    }
			}
		    }
		}
	    }
	});
	loadUserPrefs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneLight = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListePieces = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldLbl = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextFieldDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonOrder = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonReindex = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListPages = new javax.swing.JList();
        jButtonPlus = new javax.swing.JButton();
        jButtonMoins = new javax.swing.JButton();
        jButtonUp = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();
        jLabelAdditionels = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonNew = new javax.swing.JButton();
        jButtonVider = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListPrefsList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneHelp = new javax.swing.JTextPane();

        setMaximumSize(new java.awt.Dimension(2000, 2000));
        setLayout(new java.awt.BorderLayout());

        jSplitPaneLight.setDividerLocation(900);
        jSplitPaneLight.setDividerSize(10);

        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(220);
        jSplitPane1.setDividerSize(10);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.setDoubleBuffered(true);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(20, 25));
        jSplitPane1.setOneTouchExpandable(true);

        jScrollPane1.setAutoscrolls(true);

        jTableListePieces.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jTableListePieces.setModel(new PiecesTableModel());
        jTableListePieces.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableListePieces.setDoubleBuffered(true);
        jTableListePieces.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableListePieces.getTableHeader().setReorderingAllowed(false);
        jTableListePieces.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableListePiecesPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListePieces);
        jTableListePieces.setDefaultRenderer(Date.class, new DateCelleRenderer());
        TableColumn col = jTableListePieces.getColumnModel().getColumn(3);
        col.setCellEditor(new DateCelleEditor(DateCelleRenderer.DATE));
        jTableListePieces.setRowHeight(40);

        jSplitPane1.setBottomComponent(jScrollPane1);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonAdd, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonAdd.text")); // NOI18N
        jButtonAdd.setEnabled(false);
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonUpdate, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonUpdate.text")); // NOI18N
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jLabel2.text")); // NOI18N

        jTextFieldLbl.setText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jTextFieldLbl.text")); // NOI18N
        jTextFieldLbl.setToolTipText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jTextFieldLbl.toolTipText")); // NOI18N
        jTextFieldLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextFieldLblMouseEntered(evt);
            }
        });
        jTextFieldLbl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldLblFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jLabel3.text")); // NOI18N

        jFormattedTextFieldDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm"))));
        jFormattedTextFieldDate.setText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jFormattedTextFieldDate.text")); // NOI18N
        jFormattedTextFieldDate.setToolTipText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jFormattedTextFieldDate.toolTipText")); // NOI18N
        jFormattedTextFieldDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextFieldDateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jFormattedTextFieldDateMouseEntered(evt);
            }
        });
        jFormattedTextFieldDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextFieldDatePropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jLabel4.text")); // NOI18N

        jButtonOrder.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonOrder, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonOrder.text")); // NOI18N
        jButtonOrder.setToolTipText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonOrder.toolTipText")); // NOI18N
        jButtonOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonOrderMouseEntered(evt);
            }
        });
        jButtonOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderActionPerformed(evt);
            }
        });

        jButtonDelete.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDelete, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonDelete.text")); // NOI18N
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonLoad.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonLoad, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonLoad.text")); // NOI18N
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonReindex.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonReindex, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonReindex.text")); // NOI18N
        jButtonReindex.setToolTipText(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonReindex.toolTipText")); // NOI18N
        jButtonReindex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonReindexMouseEntered(evt);
            }
        });
        jButtonReindex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReindexActionPerformed(evt);
            }
        });

        jListPages.setModel(new FileListModel());
        jListPages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPagesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jListPagesMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(jListPages);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonPlus, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonPlus.text")); // NOI18N
        jButtonPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlusActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonMoins, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonMoins.text")); // NOI18N
        jButtonMoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoinsActionPerformed(evt);
            }
        });

        jButtonUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/util/up30.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonUp, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonUp.text")); // NOI18N
        jButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpActionPerformed(evt);
            }
        });

        jButtonDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/util/down60.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDown, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonDown.text")); // NOI18N
        jButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownActionPerformed(evt);
            }
        });

        jLabelAdditionels.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelAdditionels, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jLabelAdditionels.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonNew, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonNew.text")); // NOI18N
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonVider, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonVider.text")); // NOI18N
        jButtonVider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViderActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonExport, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jButtonExport.text")); // NOI18N
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(jTextFieldLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jFormattedTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonReindex, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonExport))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonNew, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAdditionels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonMoins, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonVider, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1)
                    .addComponent(jButtonDown)
                    .addComponent(jButtonUp)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAdditionels)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jFormattedTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAdd)
                            .addComponent(jButtonNew))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonUpdate)
                            .addComponent(jButtonDelete)
                            .addComponent(jButtonExport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonSave)
                                .addComponent(jButton1))
                            .addComponent(jButtonLoad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonReindex)
                            .addComponent(jButtonOrder)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButtonPlus)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonMoins, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonVider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonUp)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonDown))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel2);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jSplitPaneLight.setLeftComponent(jPanel1);

        jPanel3.setEnabled(false);
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        jListPrefsList.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jListPrefsList.border.title"))); // NOI18N
        jListPrefsList.setModel(new FileListModel());
        jListPrefsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPrefsListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jListPrefsList);
        jListPrefsList.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jListPrefsList.AccessibleContext.accessibleName")); // NOI18N

        jPanel3.add(jScrollPane4);

        jTextPaneHelp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PiecesJPanel.class, "PiecesJPanel.jTextPaneHelp.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont(), getForeground())); // NOI18N
        jScrollPane2.setViewportView(jTextPaneHelp);

        jPanel3.add(jScrollPane2);

        jSplitPaneLight.setRightComponent(jPanel3);

        add(jSplitPaneLight, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

	final Piece p = new Piece();
	p.setLabel(this.jTextFieldLbl.getText());
	p.setStartDate((Date) jFormattedTextFieldDate.getValue());
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		getInternalModel().add(p);
		//SousPiece souspiece = new SousPiece();
		//souspiece.setIndex(0);
		//getFileListModel().add(souspiece);
		p.getFiles().addAll(getFileListModel().getFiles());

	    }
	});


    }//GEN-LAST:event_jButtonAddActionPerformed
    boolean isNotEmpty(String txt) {
	return (txt != null && !"".equals(txt));
    }

    PiecesTableModel getInternalModel() {
	return ((PiecesTableModel) jTableListePieces.getModel());
    }

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
	Piece p = getSelectedPiece();
	if (p != null) {

	    p.setLabel(this.jTextFieldLbl.getText());
	    p.setStartDate((Date) jFormattedTextFieldDate.getValue());
	    updateSousPieces(p);
	    SwingUtilities.invokeLater(new Runnable() {
		@Override
		public void run() {
		    getInternalModel().update(jTableListePieces.getSelectedRow());
		}
	    });


	}
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jTextFieldLblFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLblFocusLost
	//jButton2.setEnabled( isNotEmpty(jTextFieldLbl.getText())&& isNotEmpty(jFormattedTextFieldDate.getText()));
    }//GEN-LAST:event_jTextFieldLblFocusLost

    private void jButtonOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderActionPerformed
	sortModel();
    }//GEN-LAST:event_jButtonOrderActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
	deleteSelected();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    public void quantify(String thefile) {
	FileInputStream in = null;
	try {
	    LoaderStorer loader = new LoaderStorer();
	    PiecesTableModel tm = (PiecesTableModel) jTableListePieces.getModel();
	    File fP = new File(thefile);
	    if (fP.exists()) {
		in = new FileInputStream(fP);
		if (in != null) {
		    PiecesTableModel mdl = loader.loadModel(in);
		    (tm).fill(mdl);
		}
	    } else {
		loader.storeModel(tm, fP);
	    }
	    this.lastFile = fP;

	} catch (FileNotFoundException ex) {
	    Exceptions.printStackTrace(ex);
	} catch (Exception ex) {
	    Exceptions.printStackTrace(ex);
	} finally {
	    try {
		if (in != null) {
		    in.close();
		}
	    } catch (IOException ex) {
		Exceptions.printStackTrace(ex);
	    }
	}
    }

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
	LoaderStorer loader = new LoaderStorer();
	JFileChooser c = getOrCreateFileChooser();

	c.setMultiSelectionEnabled(false);

	c.setFileFilter(getFilter());


	int resumt = c.showOpenDialog(this);
	if (resumt == JFileChooser.APPROVE_OPTION) {
	    File file = c.getSelectedFile();
	    try {
		FileInputStream in = new FileInputStream(file);
		if (in != null) {
		    PiecesTableModel mdl = loader.loadModel(in);
		    ((PiecesTableModel) jTableListePieces.getModel()).fill(mdl);
		    in.close();
		}
	    } catch (Exception ex) {
		Exceptions.printStackTrace(ex);
	    }
	}
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed


	if (this.lastFile != null) {
	    save(lastFile);
	} else {
	    export();
	}
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jFormattedTextFieldDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDatePropertyChange
	jButtonAdd.setEnabled(evt.getNewValue() != null);

    }//GEN-LAST:event_jFormattedTextFieldDatePropertyChange

    private void jButtonReindexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReindexActionPerformed
	reindex();
    }//GEN-LAST:event_jButtonReindexActionPerformed

    private void jButtonOrderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrderMouseEntered
	fillText("Pour écrire les conclusions ou mémoires il est souhaité\n"
		+ " d'ordonner les pièces,nous vous proposons un tri chronologique.\n"
		+ " Remplissez la liste des documents qui vous servirons de preuves,\n"
		+ " une fois toutes vos preuves insérées, cliquer sur triez et renuméroter pour avoir la liste des pièces dans l'ordre chronologique");
    }//GEN-LAST:event_jButtonOrderMouseEntered

    private void jButtonReindexMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReindexMouseEntered
	fillText("Renuméroter une centaine de documents dans l'ordre\n"
		+ " chronologique suite à une insertion est une tâche qui est "
		+ "fastidieuse, surtout si plusieurs insertion surviennent \n"
		+ " en urgence à faire en très peu de temps.\n"
		+ " Cette fonctionalité est proposée ici."
		+ "Une fois que tous les documents qui vous servent de\n"
		+ " sont pièces saisies, vous pouvez les renuméroter en un seul click.\n"
		+ "Ces documents\n vous seront proposés lors de l'écriture des "
		+ "conclusions pour alimenter votre argumentation, pour gagner l'affaire.\n"
		+ "Nommez les biens pour les reconnaître dans le champ label.\n"
		+ "Une fois que vous êtes sûr que le nombre de document est complet,\n"
		+ " vous pouvez écrire le numéro de la pièce"
		+ "sur les copies imprimées de vos pièces.\n"
		+ " Une fois cela effectué vous pouvez photocopier"
		+ " les conclusions en deux exemplaires ou trois,\n"
		+ "à destination de la section des conseillers Prud'Hommes que vous avez choisi,"
		+ "de la partie defenderesse et de son avocat,...");
    }//GEN-LAST:event_jButtonReindexMouseEntered

    private void jFormattedTextFieldDateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDateMouseEntered
	fillText("Entrez la date de début de ce document appelé pièce, qui vous sert\n"
		+ " généralement de preuve."
		+ "Dans certains cas les heures sont déterminantes pour le gain\n"
		+ " et l'éclairage d'une affaire surtout lors des incidents qui se\n"
		+ " déroulent en une journée,les mails échangés dans un délais très\n"
		+ " cours, les dépassements d'heures...");
    }//GEN-LAST:event_jFormattedTextFieldDateMouseEntered

    private void jTextFieldLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldLblMouseEntered
	fillText("Entrez le nom que vous attribuez à ce document que vous\n"
		+ " allez ajouter dans la liste de vos preuves.\n"
		+ "Exemple: Contrat de travail page 1, Contrat de travail page 2,\n"
		+ " Fiche de paye Mars 2012, Attestation de témoin,\n"
		+ "Lettre recomandé du 20 Juin, Convocation à l'entretien préalable de licenciement.etc...");
    }//GEN-LAST:event_jTextFieldLblMouseEntered

    private void jButtonPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlusActionPerformed
	JFileChooser ch = createOrGetfilesSelector();

	int res = ch.showOpenDialog(this);
	if (JFileChooser.APPROVE_OPTION == res) {
	    final File[] fs = ch.getSelectedFiles();
	    SwingUtilities.invokeLater(new Runnable() {
		@Override
		public void run() {
		    for (int i = 0; i < fs.length; i++) {
			File file = fs[i];
			SousPiece sous = new SousPiece();
			sous.setIndex(i);
			sous.setPath(file.getPath());
			getFileListModel().add(sous);
		    }
		    Piece pieceSelected = getSelectedPiece();
		    if (pieceSelected != null) {
			//updateSousPieces(pieceSelected);
			pieceSelected.setFiles(getFileListModel().getFiles());
		    }

		}
	    });
	}
    }//GEN-LAST:event_jButtonPlusActionPerformed

    private void jButtonMoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoinsActionPerformed
	// delete
	SousPiece obj = (SousPiece) jListPages.getSelectedValue();
	if (obj != null) {
	    getFileListModel().remove(obj);
	}


    }//GEN-LAST:event_jButtonMoinsActionPerformed

    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed
	SousPiece obj = (SousPiece) jListPages.getSelectedValue();
	if (obj != null) {
	    int index = jListPages.getSelectedIndex();
	    if (index > 0 && index < getFileListModel().getSize()) {
		getFileListModel().up(obj, index);
		jListPages.setSelectedIndex(index - 1);
	    }
	}
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed
	SousPiece obj = (SousPiece) jListPages.getSelectedValue();
	int index = jListPages.getSelectedIndex();
	if (index >= 0 && index < getFileListModel().getSize() - 1) {
	    getFileListModel().down(obj, index);

	    jListPages.setSelectedIndex(index + 1);
	}
    }//GEN-LAST:event_jButtonDownActionPerformed

    private void jListPagesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPagesMouseEntered
	setToolTipText("Double cliquer pour voir le document");
    }//GEN-LAST:event_jListPagesMouseEntered

    private void jListPagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPagesMouseClicked
	if (evt.getClickCount() == 2) {
	    SousPiece obj = (SousPiece) jListPages.getSelectedValue();
	    if (obj != null) {
		if (obj.getPath() != null && (obj.getPath().toLowerCase().endsWith(".pdf") ||
			obj.getPath().toLowerCase().endsWith(".doc")||
			obj.getPath().toLowerCase().endsWith(".docx")||
			obj.getPath().toLowerCase().endsWith(".rtf")||
			obj.getPath().toLowerCase().endsWith(".txt"))	
			){
		    openUrl("file:///"+obj.getPath());
		} else {
		ImageBean panel = new ImageBean();
		panel.setImageLabel(obj.getPath());
		Act act = new Act(null);
		DialogDescriptor dd = new DialogDescriptor(panel, "Visualisation", true, new Object[]{"Fermer"}, "Fermer", 0, null, act);
		Dialog dl = DialogDisplayer.getDefault().createDialog(dd);
		act.setDlg(dl);
		dl.setVisible(true);
		}
	    }

	}
    }//GEN-LAST:event_jListPagesMouseClicked

    protected void openUrl(String url_) {
	String url = null;
	if (url_ == null) {
	    url = "www.jsph.fr";
	} else {
	    url = url_.replace('\\', '/');
	    url = url.replace(" ", "%20");
	    
	}
	if (java.awt.Desktop.isDesktopSupported()) {
	    java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
	    if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
		try {
		    java.net.URI uri = new java.net.URI(url);
		    desktop.browse(uri);
		} catch (IOException ex) {
		    Exceptions.printStackTrace(ex);
		} catch (URISyntaxException ex) {
		    Exceptions.printStackTrace(ex);
		}
	    } else {
		notifyError("Veuillez configurer un navigateur par défaut pour ouvrir la page:" + url, null);

	    }
	}
    }

    private void jListPrefsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPrefsListMouseClicked
	if (evt.getClickCount() >= 2) {
	    SousPiece s = (SousPiece) jListPrefsList.getSelectedValue();
	}

    }//GEN-LAST:event_jListPrefsListMouseClicked

    private void jFormattedTextFieldDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDateMouseClicked
	// TODO add your handling code here:
	if (evt.getClickCount() == 2) {
	    DateChooser dc = new DateChooser(WindowManager.getDefault().getMainWindow(), jFormattedTextFieldDate, true);
	    dc.setLocationRelativeTo(jFormattedTextFieldDate);
	    dc.setLocation(evt.getPoint());
	    dc.setVisible(true);
	}
    }//GEN-LAST:event_jFormattedTextFieldDateMouseClicked

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
	this.jTableListePieces.getSelectionModel().clearSelection();
	this.jTextFieldLbl.setText("");
	this.jFormattedTextFieldDate.setValue(null);
	this.jListPages.setModel(new FileListModel());
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jTableListePiecesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableListePiecesPropertyChange
	//notifyError(evt.toString(), null);
	/*if (!evt.getNewValue().equals(evt.getOldValue())){
	 saveAuto();
	 }*/
    }//GEN-LAST:event_jTableListePiecesPropertyChange

    private void jButtonViderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViderActionPerformed
	getFileListModel().clear();
    }//GEN-LAST:event_jButtonViderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LoaderStorer loader = new LoaderStorer();
	JFileChooser c = getOrCreateFileChooser();

	c.setMultiSelectionEnabled(false);

	c.setFileFilter(getFilter());


	int resumt = c.showOpenDialog(this);
	if (resumt == JFileChooser.APPROVE_OPTION) {
	    File file = c.getSelectedFile();
	    try {
		FileInputStream in = new FileInputStream(file);
		if (in != null) {
		    PiecesTableModel mdl = loader.loadModel(in);
		    for (Iterator it = mdl.getList().iterator(); it.hasNext();) {
		         Piece newp = (Piece)it.next();
			((PiecesTableModel) jTableListePieces.getModel()).add(newp);
		    }
		    
		    in.close();
		}
	    } catch (Exception ex) {
		Exceptions.printStackTrace(ex);
	    }
	}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        // TODO add your handling code here:
	export();
    }//GEN-LAST:event_jButtonExportActionPerformed
    private MFilter filter = null;

    private FileFilter getFilter() {
	if (filter == null) {
	    filter = new MFilter();
	}
	return filter;
    }

    public void saveAuto() {
	save(this.lastFile);
    }

    private void save(File file) {
	try {
	    LoaderStorer loader = new LoaderStorer();
	    loader.storeModel((PiecesTableModel) this.jTableListePieces.getModel(), file);
	    this.lastFile = file;
	    addLastFile(file.getPath());
	} catch (Exception ex) {
	    Exceptions.printStackTrace(ex);
	}
    }

    private void updateSousPieces(Piece p) {
	FileListModel sousPiecesModel = getFileListModel();
	if (sousPiecesModel != null) {
	    sousPiecesModel.clear();
	}
	ArrayList<SousPiece> sousPieces = p.getFiles();
	if (sousPiecesModel != null) {
	    for (SousPiece sousPiece1 : sousPieces) {
		sousPiecesModel.add(sousPiece1);
	    }
	} else {
	    sousPiecesModel = new FileListModel();
	    for (SousPiece sousPiece1 : sousPieces) {
		sousPiecesModel.add(sousPiece1);
	    }
	    this.jListPages.setModel(sousPiecesModel);
	}
    }

    private void export() throws HeadlessException {
	JFileChooser c = getOrCreateFileChooser();

	c.setMultiSelectionEnabled(false);
	c.setFileFilter(getFilter());

	int resumt = c.showSaveDialog(this);
	if (resumt == JFileChooser.APPROVE_OPTION) {
	    File file = c.getSelectedFile();
	    save(file);
	}
    }

    class MFilter extends FileFilter {

	@Override
	public boolean accept(File f) {
	    /*File fDir = new File(currentDirectory != null?currentDirectory.getPath():GlobalParameters.getWorkDir(null));
	     if (fDir.getParent().compareToIgnoreCase(f.getParent()) != 0) {
	     return false;
	     }*/
	    return f.isDirectory() || f.getName().endsWith(".pjsph");

	}

	@Override
	public String getDescription() {
	    return "Liste de pièces *.pjsph";
	}
    }

    class Act implements ActionListener {

	private Dialog dlg;

	public Dialog getDlg() {
	    return dlg;
	}

	public void setDlg(Dialog dlg) {
	    this.dlg = dlg;
	}

	public Act(Dialog dlg) {
	    this.dlg = dlg;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
	    this.dlg.dispose();
	}
    }

    FileListModel getFileListModel() {
	return (FileListModel) this.jListPages.getModel();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonMoins;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOrder;
    private javax.swing.JButton jButtonPlus;
    private javax.swing.JButton jButtonReindex;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonVider;
    private javax.swing.JFormattedTextField jFormattedTextFieldDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAdditionels;
    private javax.swing.JList jListPages;
    private javax.swing.JList jListPrefsList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPaneLight;
    private javax.swing.JTable jTableListePieces;
    private javax.swing.JTextField jTextFieldLbl;
    private javax.swing.JTextPane jTextPaneHelp;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<Document> getUndoableDocuments() {
	return null;
    }

    @Override
    public boolean isNextPossible() {
	if (jTableListePieces.getModel() == null) {
	    return false;
	}
	return true;
    }

    @Override
    public BindingGroup getBindingGroup() {
	return null;
    }

    @Override
    public void initJComponents() {
	initComponents();
    }

    private void sortModel() {
	PiecesTableModel model = (PiecesTableModel) this.jTableListePieces.getModel();
	model.sort();
    }

    private void deleteSelected() {
	PiecesTableModel model = (PiecesTableModel) this.jTableListePieces.getModel();
	int idx = this.jTableListePieces.getSelectedRow();
	if (idx >= 0) {
	    model.delete(idx);
	}
    }

    private void reindex() {
	PiecesTableModel model = (PiecesTableModel) this.jTableListePieces.getModel();
	model.reindex();
    }

    private void fillText(final String txt) {
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		jTextPaneHelp.setText(txt);
	    }
	});
    }

    public Piece getSelectedPiece() {
	final Piece p = getInternalModel().getPiece(jTableListePieces.getSelectedRow());
	return p;
    }

    private JFileChooser getOrCreateFileChooser() {

	if (currentFileChooser == null) {

	    if (currentDirectory == null) {
		notifyError("Pas d'affaire en cours", null);
		currentFileChooser = new JFileChooser();
		return currentFileChooser;
	    }
	    File fDir = new File(currentDirectory.getPath());
	    currentFileChooser = new JFileChooser(fDir.getParent());
	}
	return currentFileChooser;
    }

    private JFileChooser createOrGetfilesSelector() {
	// add file
	if (addFileChooser == null) {
	    addFileChooser = new JFileChooser();
	}
	addFileChooser.setMultiSelectionEnabled(true);
	return addFileChooser;
    }

    private void loadUserPrefs() {
	if (prefs != null) {
	} else {
	    prefs = Preferences.userRoot().node("JSPH").node("Pieces");
	}
	{
	    int nb = prefs.getInt("ko", 0);
	    FileListModel fileModel = getLastFilesModel();
	    if (fileModel == null) {
		fileModel = new FileListModel();

	    }
	    this.jListPrefsList.setModel(fileModel);
	    for (int i = 0; i < nb; i++) {
		SousPiece sousPiece = new SousPiece();
		sousPiece.setIndex(i);
		sousPiece.setPath(prefs.get("" + i, ""));
		fileModel.add(sousPiece);
	    }

	}
    }

    private void storeUserPrefs() {
	prefs = Preferences.userRoot().node("JSPH").node("Pieces");
	FileListModel fileModel = getLastFilesModel();
	if (fileModel != null) {
	    ArrayList<SousPiece> files = fileModel.getFiles();
	    if (files != null) {
		prefs.putInt("ko", files.size());
		for (int i = 0; i < files.size(); i++) {
		    SousPiece sousPiece = files.get(i);
		    prefs.put("" + i, sousPiece.getPath());
		}
	    }
	}


    }
    private Preferences prefs;

    private FileListModel getLastFilesModel() {
	FileListModel fileModel = (FileListModel) this.jListPrefsList.getModel();
	return fileModel;
    }

    private void addLastFile(String fileStr) {
	SousPiece f = new SousPiece();
	f.setPath(fileStr);
	getLastFilesModel().add(f);
    }

    @Override
    public void beforeClose() {
	super.beforeClose();
	storeUserPrefs();
    }

    public File getLastFile() {
	return lastFile;
    }

    public void setLastFile(File lastFile) {
	this.lastFile = lastFile;
    }

    public GUIManager getCurrentDirectory() {
	return currentDirectory;
    }

    public void setCurrentDirectory(GUIManager currentDirectory) {
	this.currentDirectory = currentDirectory;
    }

    public static void main(String[] args) {
	/* Create and display the dialog */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		javax.swing.JFrame dialog = new javax.swing.JFrame();
		dialog.addWindowListener(new java.awt.event.WindowAdapter() {
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent e) {
			System.exit(0);
		    }
		});
		dialog.getContentPane().setLayout(new BorderLayout());
		dialog.getContentPane().add(new PiecesJPanel(), BorderLayout.CENTER);
		dialog.pack();
		dialog.setVisible(true);
	    }
	});
    }
}
