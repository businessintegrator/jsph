/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer.panel;

import com.bi.calendar.dlg.DateChooser;
import com.bi.jsph.model.ConventionListModel;
import com.bi.right.customer.bo.GUIManager;
import com.bi.right.customer.panel.sub.SalairesJPanel;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.text.Document;
import org.jdesktop.beansbinding.BindingGroup;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.windows.WindowManager;

/**
 *
 * @author rafaralahitsimba tiaray
 */
public class ContractJPanel extends AbstractPanel {

    private static final String ACCEPTER = "OK";

    public ContractJPanel(GUIManager root) {
	super(root);
	initComponents();
	fillAnc(true);
    }

    /**
     * Creates new form ContractJPanel
     */
    public ContractJPanel() {
	initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        gUIManager1 = getParentRoot();
        jLabelContract = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jFormattedTextFieldStart = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextFieldEnd = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        cdi = new javax.swing.JRadioButton();
        cdd = new javax.swing.JRadioButton();
        jRadioButtonother = new javax.swing.JRadioButton();
        jTextFieldOther = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldConvention = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jCheckBoxRupture = new javax.swing.JCheckBox();
        jButtonRupture = new javax.swing.JButton();
        jLabelAnc = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButtonRetenue = new javax.swing.JButton();
        jFormattedTextFieldSalaireRef = new javax.swing.JFormattedTextField();
        jComboBoxChoix = new javax.swing.JComboBox();
        jLabelMois = new javax.swing.JLabel();
        jFormattedTextFieldAnciennete = new javax.swing.JFormattedTextField();
        jCheckBoxEcrit = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldProfession = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabelContract, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabelContract.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel1.text")); // NOI18N

        jFormattedTextFieldStart.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        jFormattedTextFieldStart.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jFormattedTextFieldStart.toolTipText")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.startdt}"), jFormattedTextFieldStart, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jFormattedTextFieldStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextFieldStartMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jFormattedTextFieldStartMouseExited(evt);
            }
        });
        jFormattedTextFieldStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldStartFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel2.text")); // NOI18N

        jFormattedTextFieldEnd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        jFormattedTextFieldEnd.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jFormattedTextFieldEnd.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.enddt}"), jFormattedTextFieldEnd, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jFormattedTextFieldEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextFieldEndMouseClicked(evt);
            }
        });
        jFormattedTextFieldEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldEndFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel3.text")); // NOI18N

        buttonGroup1.add(cdi);
        org.openide.awt.Mnemonics.setLocalizedText(cdi, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.cdi.text")); // NOI18N
        cdi.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.cdi.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.cdi}"), cdi, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        buttonGroup1.add(cdd);
        org.openide.awt.Mnemonics.setLocalizedText(cdd, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.cdd.text")); // NOI18N
        cdd.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.cdd.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.cdd}"), cdd, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        buttonGroup1.add(jRadioButtonother);
        jRadioButtonother.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButtonother, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jRadioButtonother.text")); // NOI18N
        jRadioButtonother.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jRadioButtonother.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.nature}"), jTextFieldOther, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel4.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.convcoll}"), jTextFieldConvention, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldConvention.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextFieldConventionMouseEntered(evt);
            }
        });
        jTextFieldConvention.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldConventionKeyReleased(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jList1.setModel(new com.bi.jsph.model.ConventionListModel());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jList1.toolTipText")); // NOI18N
        jList1.setDoubleBuffered(true);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setAlignmentX(JScrollBar.LEFT_ALIGNMENT);
        jScrollPane1.setViewportView(jList1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxRupture, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jCheckBoxRupture.text")); // NOI18N
        jCheckBoxRupture.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jCheckBoxRupture.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.rompu}"), jCheckBoxRupture, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBoxRupture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRuptureActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRupture, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jButtonRupture.text")); // NOI18N
        jButtonRupture.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jButtonRupture.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jCheckBoxRupture, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButtonRupture, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButtonRupture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRuptureActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelAnc, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabelAnc.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRetenue, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jButtonRetenue.text")); // NOI18N
        jButtonRetenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetenueActionPerformed(evt);
            }
        });

        jFormattedTextFieldSalaireRef.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###########.##"))));
        jFormattedTextFieldSalaireRef.setText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jFormattedTextFieldSalaireRef.text")); // NOI18N

        jComboBoxChoix.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contrat de travail temporaire", "Contrat de travail à temps partiel", "Contrat de travail intermittent", "Contrat d’apprentissage", "Contrat unique d’insertion (CUI)", " " }));
        jComboBoxChoix.setToolTipText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jComboBoxChoix.toolTipText")); // NOI18N
        jComboBoxChoix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxChoixItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelMois, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabelMois.text")); // NOI18N

        jFormattedTextFieldAnciennete.setText(org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jFormattedTextFieldAnciennete.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEcrit, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jCheckBoxEcrit.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.ecrit}"), jCheckBoxEcrit, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ContractJPanel.class, "ContractJPanel.jLabel5.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${contrat.profession}"), jTextFieldProfession, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelContract)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelAnc, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jFormattedTextFieldStart)
                                    .addComponent(jFormattedTextFieldEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(jTextFieldProfession, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(jFormattedTextFieldAnciennete, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(jFormattedTextFieldSalaireRef))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonRetenue)
                                    .addComponent(jLabelMois, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBoxRupture)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cdi)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cdd)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButtonother)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonRupture)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxEcrit))
                                    .addComponent(jTextFieldOther))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldConvention, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelContract)
                    .addComponent(jCheckBoxRupture)
                    .addComponent(jCheckBoxEcrit)
                    .addComponent(jButtonRupture))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cdi)
                    .addComponent(cdd)
                    .addComponent(jRadioButtonother)
                    .addComponent(jTextFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFormattedTextFieldStart, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextFieldEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jFormattedTextFieldSalaireRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRetenue))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldProfession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldAnciennete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAnc)
                    .addComponent(jLabelMois))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldConvention, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxRuptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRuptureActionPerformed
	if (jCheckBoxRupture.isSelected() && "".equals(jFormattedTextFieldEnd.getText())) {
	    SwingUtilities.invokeLater(new Runnable() {
		@Override
		public void run() {
		    jFormattedTextFieldEnd.setBackground(Color.LIGHT_GRAY);
		    jFormattedTextFieldEnd.setEnabled(true);
		    isNextPossible();

		}
	    });
	}
    }//GEN-LAST:event_jCheckBoxRuptureActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
	if (evt.getValueIsAdjusting()){
	    
	 insertConvnetion();
	}

    }//GEN-LAST:event_jList1ValueChanged

    private void jButtonRuptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRuptureActionPerformed
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		RuptureJPanel rupture = new RuptureJPanel(getParentRoot());
		Act1 actionlistener = new Act1();
		DialogDescriptor dd = new DialogDescriptor(rupture,
			"Rupture", true,
			new Object[]{ACCEPTER}, ACCEPTER, 0, null, actionlistener);
		Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
		actionlistener.setDlg(resDls);
		resDls.setVisible(true);
	    }
	});


    }//GEN-LAST:event_jButtonRuptureActionPerformed

    private void insertConvnetion() {
	String t = this.jList1.getSelectedValue().toString();
	if (this.jList1 == null){return;}
	int ind = t.lastIndexOf("- K");
	if (ind > 0) {
	    t = t.substring(0, ind);
	}
	final String txt = t;
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		jTextFieldConvention.setText(txt);
		isNextPossible();
	    }
	});
    }

    private class Act1 implements ActionListener {

	private Dialog dlg = null;

	@Override
	public void actionPerformed(ActionEvent e) {
	    if (ACCEPTER.equals(e.getActionCommand())) {
		if (dlg != null) {
		    dlg.dispose();
		}
	    }
	}

	private void setDlg(Dialog resDls) {
	    this.dlg = resDls;
	}
    }
    private void jTextFieldConventionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldConventionMouseEntered
	if (isWizardMode()) {
	    fillEditorText("La convention collective est sur la fiche de paye.\n"
		    + "Syntec par exemple, vous ne le trouverez certainement pas sur la fichie de paye\n"
		    + "Cela peut être abrégé sous forme Conv. coll\n"
		    + "Bureau d'étude tech, cabinets d'ingé-conseils,ste conseils...\n"
		    + "Celui sur le contrat de travail peut être trop ancien,\n vérifiez sur la "
		    + "fiche de paye ou l'affichage légal");
	} else {
	    fillEditorText("Le nom de la convention collective est sur la fiche de paye ou demandez à vos délégués");
	}

    }//GEN-LAST:event_jTextFieldConventionMouseEntered

    private void jFormattedTextFieldEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldEndFocusLost
	if (jCheckBoxRupture.isSelected()) {
	    fillAnc(false);
	}
    }//GEN-LAST:event_jFormattedTextFieldEndFocusLost

    private void jButtonRetenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetenueActionPerformed
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		final SalairesJPanel salaires = new SalairesJPanel(jFormattedTextFieldSalaireRef);
		Act1 actionlistener = new Act1();
		DialogDescriptor dd = new DialogDescriptor(salaires, "Salaires de référence", true,
			new Object[]{ACCEPTER}, ACCEPTER, 0, null,
			actionlistener);
		Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
		actionlistener.setDlg(resDls);
		resDls.setVisible(true);

	    }
	});


    }//GEN-LAST:event_jButtonRetenueActionPerformed

    private void jComboBoxChoixItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxChoixItemStateChanged
	// TODO add your handling code here:
	if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
	    jTextFieldOther.setText(jComboBoxChoix.getSelectedItem().toString());
	}
    }//GEN-LAST:event_jComboBoxChoixItemStateChanged

    private void jFormattedTextFieldStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldStartFocusLost
	// TODO add your handling code here:
	//if (jCheckBoxRupture.isSelected()&& jFormattedTextFieldEnd.getText()!=null) {
	fillAnc(false);
	//}
    }//GEN-LAST:event_jFormattedTextFieldStartFocusLost

    private void jFormattedTextFieldStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextFieldStartMouseClicked
	// TODO add your handling code here:
	if (evt.getClickCount() == 2) {
	    DateChooser dc = new DateChooser(WindowManager.getDefault().getMainWindow(), jFormattedTextFieldStart);
	    dc.setLocationRelativeTo(jFormattedTextFieldStart);
	    dc.setLocation(evt.getPoint());

	    dc.setVisible(true);
	}
    }//GEN-LAST:event_jFormattedTextFieldStartMouseClicked

    private void jFormattedTextFieldEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextFieldEndMouseClicked
	// TODO add your handling code here:
	if (evt.getClickCount() == 2) {
	    DateChooser dc = new DateChooser(WindowManager.getDefault().getMainWindow(), jFormattedTextFieldEnd);
	    dc.setLocationRelativeTo(jFormattedTextFieldEnd);
	    dc.setLocation(evt.getPoint());

	    dc.setVisible(true);
	}
    }//GEN-LAST:event_jFormattedTextFieldEndMouseClicked

    private void jTextFieldConventionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldConventionKeyReleased
	String filter = jTextFieldConvention.getText();
	
	((ConventionListModel) this.jList1.getModel()).filter(filter);
    }//GEN-LAST:event_jTextFieldConventionKeyReleased

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
	// TODO add your handling code here:
	 if (evt.getClickCount() > 1) {
	    
	     insertConvnetion();
	    jList1.getFont().deriveFont(Font.PLAIN);
	}
    }//GEN-LAST:event_jList1MouseClicked

    private void jFormattedTextFieldStartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextFieldStartMouseExited
        // TODO add your handling code here:
	fillAnc(true);
	
    }//GEN-LAST:event_jFormattedTextFieldStartMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cdd;
    private javax.swing.JRadioButton cdi;
    private com.bi.right.customer.bo.GUIManager gUIManager1;
    private javax.swing.JButton jButtonRetenue;
    private javax.swing.JButton jButtonRupture;
    private javax.swing.JCheckBox jCheckBoxEcrit;
    private javax.swing.JCheckBox jCheckBoxRupture;
    private javax.swing.JComboBox jComboBoxChoix;
    private javax.swing.JFormattedTextField jFormattedTextFieldAnciennete;
    private javax.swing.JFormattedTextField jFormattedTextFieldEnd;
    private javax.swing.JFormattedTextField jFormattedTextFieldSalaireRef;
    private javax.swing.JFormattedTextField jFormattedTextFieldStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelAnc;
    private javax.swing.JLabel jLabelContract;
    private javax.swing.JLabel jLabelMois;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButtonother;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldConvention;
    private javax.swing.JTextField jTextFieldOther;
    private javax.swing.JTextField jTextFieldProfession;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<Document> getUndoableDocuments() {
	ArrayList<Document> prj = new ArrayList<Document>();
	prj.add(jFormattedTextFieldAnciennete.getDocument());
	prj.add(jTextFieldConvention.getDocument());
	prj.add(jTextFieldOther.getDocument());
	prj.add(jFormattedTextFieldStart.getDocument());
	prj.add(jFormattedTextFieldEnd.getDocument());
	return prj;
    }

    @Override
    public boolean isNextPossible() {
	if (isEmpty(jFormattedTextFieldStart, jCheckBoxRupture)) {
	    return false;
	}
	if (jCheckBoxRupture.isSelected()) {
	    return !isEmpty(jFormattedTextFieldEnd);
	}
	/*if (jRadioButtonother.isSelected()) {
	 return !isEmpty(jTextFieldOther);
	 }*/
	return true;
    }

    @Override
    public BindingGroup getBindingGroup() {
	return this.bindingGroup;
    }

    @Override
    public void initJComponents() {
	initComponents();
    }

    private void fillAnc(final boolean starting) {
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		String strStart = jFormattedTextFieldStart.getText();

		String endStart = jFormattedTextFieldEnd.getText();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		DecimalFormat dcf = new DecimalFormat("#####.##");
		if (strStart != null && strStart.length() > 0) {
		    try {
			if (endStart != null && endStart.length() > 0) {
			    Date d1 = sdf.parse(strStart);
			    Date d2 = sdf.parse(endStart);
			    if (d2.before(d1)) {
				NotifyDescriptor dd = new NotifyDescriptor.Message("Date de sortie avant la date de fin!", NotifyDescriptor.Message.ERROR_MESSAGE);
				DialogDisplayer.getDefault().notify(dd);
				return;
			    }
			    double an = new Double((d2.getTime() - d1.getTime()) / 1000 / 60 / 60 / 24 / 365).doubleValue();
			    jFormattedTextFieldAnciennete.setText(dcf.format(an));
			} else {
			    Date d1 = sdf.parse(strStart);
			    Date d2 = new Date();
			    if (d2.before(d1)) {
				NotifyDescriptor dd = new NotifyDescriptor.Message("Date d'entré dans le futur!", NotifyDescriptor.Message.ERROR_MESSAGE);
				DialogDisplayer.getDefault().notify(dd);
				return;
			    }
			    double an = new Double((d2.getTime() - d1.getTime()) / 1000 / 60 / 60 / 24 / 365).doubleValue();
			    jFormattedTextFieldAnciennete.setText(dcf.format(an));
			}
		    } catch (Exception e) {
			NotifyDescriptor dd = new NotifyDescriptor.Message("Erreur lors du calcul de l'ancienneté", NotifyDescriptor.Message.ERROR_MESSAGE);
			DialogDisplayer.getDefault().notify(dd);
		    }

		} else {
		    if(!starting){
		    NotifyDescriptor dd = new NotifyDescriptor.Message("Renseigner la date d'entrée du salarié", NotifyDescriptor.Message.ERROR_MESSAGE);
		    DialogDisplayer.getDefault().notify(dd);
		    }
		}
	    }
	});
    }
}
