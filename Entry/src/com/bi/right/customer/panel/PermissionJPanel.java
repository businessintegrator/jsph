/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer.panel;

import com.bi.jsph.http.Client;
import com.bi.jsph.uploa.txns.rw.BusinessClass;
import com.bi.right.customer.OpenerJDialog;
import com.bi.right.customer.ProjectTopComponent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.SwingUtilities;
import javax.swing.text.Document;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.PostMethod;
import org.jdesktop.beansbinding.BindingGroup;
import org.openide.util.Exceptions;

/**
 *
 * @author rafaralahitsimba tiaray
 */
public class PermissionJPanel extends AbstractPanel {

    private boolean connected = false;
    private OpenerJDialog opener = null;

    public PermissionJPanel(OpenerJDialog op) {
	super(op.getParentRoot());
	super.setDemandes(op.getDemandes());
	opener = op;
	initComponents();
    }

    @Override
    public AbstractPanel getNext() {
	if (super.getNext() == null) {
	    NouvelleAffaireJPanel nextPanel = new NouvelleAffaireJPanel(getParentRoot());
	    setNext(nextPanel);
	}
	return super.getNext();
    }

    /**
     * Creates new form PermissionJPanel
     */
    public PermissionJPanel() {
	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        gUIManager1 = getParentRoot();
        buttonGroupEtsorSala = new javax.swing.ButtonGroup();
        buttonGroupAtak = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelWelcome = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jLabel2.text")); // NOI18N

        jPasswordField1.setText(org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jPasswordField1.text")); // NOI18N
        jPasswordField1.setToolTipText(org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jPasswordField1.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jButton1.text")); // NOI18N
        jButton1.setToolTipText(org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jButton1.toolTipText")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${uniqueId}"), jLabel3, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabelWelcome.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelWelcome, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jLabelWelcome.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jTextField1.text")); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/jsph16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jLabel5.text")); // NOI18N
        jLabel5.setToolTipText(org.openide.util.NbBundle.getMessage(PermissionJPanel.class, "PermissionJPanel.jLabel5.toolTipText")); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelWelcome)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                .addComponent(jTextField1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2))))
                        .addContainerGap(47, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelWelcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	if ("".equals(jTextField1.getText()) && jPasswordField1.getPassword().length == 0) {
	    notifyError("Champs utilisateur/mot de passe déjà vides", null);
	} else {
	    jPasswordField1.setText("");
	    jTextField1.setText("");
	}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	// send connection
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		final Client client = new Client();
		try {
		    //connecte here

		    HttpClient httpClient = new HttpClient();


		    String domain = "localhost";
		    String mail = jTextField1.getText();
		    String password = new String(jPasswordField1.getPassword());
		    String authurl = "http://localhost:8080/Jsph/";
		    String emailkey = "email";
		    String passwordkey = "passwordkey2";
		    String queryString = "";
		    String realm = "candidat";
		    PostMethod method = new PostMethod(authurl);

                    //Aways true for the community edition
		    boolean ok = client.doservice(httpClient, domain, mail, password, method, emailkey,
			    passwordkey, queryString, realm);


		    if (ok) {
			jLabel1.setIcon(ProjectTopComponent.ICON.ACTIF.getIcon());
			jLabelWelcome.setText("Vous êtes connecté, bienvenue!");
			connected = true;
			opener.setNextEnable(true);
			filllic(client);
		    } else {
			jLabelWelcome.setText("Vous n'êtes pas connecté, nom d'utilisateur ou mot de passe invalide");
			licenceLink(client, "Contacter le service support");
			jLabel1.setIcon(ProjectTopComponent.ICON.ERROR.getIcon());
		    }
		} catch (UnknownHostException ex) {
		    notifyError("Non connecté", ex);
		    client.load();
		    filllic(client);
		} catch (HttpException ex) {
		    jLabel1.setIcon(ProjectTopComponent.ICON.ERROR.getIcon());
		    Exceptions.printStackTrace(ex);
		    notifyError("HTTP erreur de connexion au serveur", ex);

		} catch (IOException ex) {
		    jLabel1.setIcon(ProjectTopComponent.ICON.ERROR.getIcon());
		    Exceptions.printStackTrace(ex);
		    notifyError("HTTP de lecture au serveur", ex);
		} catch (Exception ex) {
		    jLabel1.setIcon(ProjectTopComponent.ICON.ERROR.getIcon());
		    Exceptions.printStackTrace(ex);
		    notifyError("Erreur inconnue", ex);
		}

	    }

	    private void licenceLink(final Client client, String label) {
		jLabel5.setEnabled(true);
		jLabel5.setText(label);
		jLabel5.addMouseListener(new MouseListener() {
		    @Override
		    public void mouseClicked(MouseEvent e) {
			if (e.getClickCount() == 1 || e.getClickCount() == 2) {
			    openBrowser(client.getBuyUrl());
			}
		    }

		    @Override
		    public void mousePressed(MouseEvent e) {
		    }

		    @Override
		    public void mouseReleased(MouseEvent e) {
		    }

		    @Override
		    public void mouseEntered(MouseEvent e) {
		    }

		    @Override
		    public void mouseExited(MouseEvent e) {
		    }
		});
	    }

	    private void filllic(final Client client) {
		Map<Date, BusinessClass> l___ = client.getListAllowance();
		if (l___ == null || l___.isEmpty()) {
		    licenceLink(client, "renouveler la licence");

		} else {
		    ProjectTopComponent.licContext(l___);
		    StringBuilder s___ = new StringBuilder();
		    SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");
		    for (Iterator it = l___.entrySet().iterator(); it.hasNext();) {
			Map.Entry<Date, BusinessClass> entryValue = (Map.Entry<Date, BusinessClass>) it.next();
			Date d___ = entryValue.getKey();
			BusinessClass d__ = entryValue.getValue();
			s___.append("Licence de type " + d__.getBoclass() + " valable jusqu'au " + sdf.format(d___) + "\t");
		    }
		    jLabel3.setText(s___.toString());

		}
	    }
	});
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked

	if (evt.getClickCount() > 1) {
	    openBrowser(null);
	}
    }//GEN-LAST:event_jLabel5MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupAtak;
    private javax.swing.ButtonGroup buttonGroupEtsorSala;
    private com.bi.right.customer.bo.GUIManager gUIManager1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelWelcome;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<Document> getUndoableDocuments() {
	List<Document> prj = new ArrayList<Document>();
	prj.add(jTextField1.getDocument());
	return prj;
	//return null;
    }

    @Override
    public boolean isNextPossible() {
	if (connected) {
	    return true;
	} else {
	    return false;
	}
    }

    @Override
    public BindingGroup getBindingGroup() {
	return bindingGroup;
    }

    @Override
    public void initJComponents() {
	initComponents();
    }

    private void openBrowser(String url_) {
	String url = url_;
	if (url == null) {
	    url = "www.jsph.fr";
	}
	if (java.awt.Desktop.isDesktopSupported()) {
	    java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
	    if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
		try {
		    java.net.URI uri = new java.net.URI(url);
		    desktop.browse(uri);
		} catch (IOException ex) {
		    Exceptions.printStackTrace(ex);
		} catch (URISyntaxException ex) {
		    Exceptions.printStackTrace(ex);
		}
	    }
	}
    }
}
