/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer.panel;

import com.bi.jsph.model.DemandesTableModel;
import com.bi.right.customer.PiecesAction;
import com.bi.right.customer.bo.Contrat;
import com.bi.right.customer.bo.Demande;
import com.bi.right.customer.bo.GUIManager;
import com.bi.right.customer.bo.Personne;
import com.bi.right.customer.bo.SalarieBO;
import com.bi.right.customer.bo.Societe;
import com.bi.right.customer.bo.Typerupture;
import com.bi.right.customer.util.GlobalParameters;
import com.bi.right.customer.util.Irreell;
import com.bi.right.customer.util.xslt.ExposeDuLitigeBld;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Logger;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.text.Document;
import org.jdesktop.beansbinding.BindingGroup;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;

/**
 *
 * @author rafaralahitsimba tiaray
 */
public class ExposeLitigeJPanel extends AbstractPanel {
    private static final Logger logger = Logger.getLogger(ExposeLitigeJPanel.class.getName());
    private Societe societe;
    private ArrayList<Demande> selected;
    private PiecesJPanel pieces;
    public ExposeLitigeJPanel(GUIManager parentroot, DemandesTableModel listeDemandes) {
       this(parentroot, listeDemandes, null);
    }
    public ExposeLitigeJPanel(GUIManager parentroot, DemandesTableModel listeDemandes,PiecesJPanel pieces) {
	super(parentroot);
	setDemandes(listeDemandes);
	initComponents();
	JPopupMenu internalPopup = new JPopupMenu();
	if (pieces == null) {
	    pieces = new PiecesJPanel();
	    pieces.setCurrentDirectory(parentroot);

	}
	PiecesAction actpieces = new PiecesAction(jEditorPane1);
	actpieces.setPieces(pieces);
	internalPopup.add(actpieces);
	jEditorPane1.setComponentPopupMenu(internalPopup);
	String argPath = parentroot.getExposeLitige();
	if (argPath == null) {
	    try {
		argPath = File.createTempFile("Litige", ".txt", new File(parentroot.getPath()).getParentFile()).getPath();
	    } catch (IOException ex) {
		Exceptions.printStackTrace(ex);
		argPath = GlobalParameters.getInstance().getWorkDir(parentroot) + "/Litige" + Integer.toHexString(hashCode());
	    }
	    parentroot.setExposeLitige(argPath);
	}
	if (argPath != null) {
	    File fB = new File(argPath);
	    if (fB.exists() && fB.length()>0) {
		logger.info(" Sauvegarde de l'exposé du litige..."+argPath);
		
		Irreell irreel = new Irreell(jEditorPane1, fB);
		irreel.run();
	    } else {
		jEditorPane1.setText(getHeaderText());
	    Parallel paralel = new Parallel(jEditorPane1.getDocument(), fB);
	    paralel.run();
	    }
	} else {
	    throw new RuntimeException("Litige expose non trouvée");
	    
	    
	}

    }

    @Override
    public AbstractPanel getNext() {
	AbstractPanel result = null;
	save();
	selected = super.getDemandes().filterSelected();
	if (selected != null && !selected.isEmpty()) {
	    AbstractPanel discussion = null;
	    for (Iterator<Demande> it = selected.iterator(); it.hasNext();) {
		Demande demande = it.next();
		if (discussion == null) {
		    discussion = new DiscussionJPanel(getParentRoot(), demande, pieces);
		    setNext(discussion);
		    result = discussion;
		} else {
		    AbstractPanel discussion2 = new DiscussionJPanel(getParentRoot(), demande, pieces);
		    discussion.setNext(discussion2);
		    discussion = discussion2;
		    //discussion = discussion.getNext();
		}
	    }
	    if (discussion != null) {
		discussion.setNext(new SaisineJPanel(getParentRoot()));
	    }
	} else {
	    NotifyDescriptor nd = new NotifyDescriptor.Message("Veuillez cocher des demandes, liste des demandes vides");
	    DialogDisplayer.getDefault().notify(nd);
	}
	return result;
    }

    /**
     * Creates new form ExposeLitigeJPanel
     */
    public ExposeLitigeJPanel() {
	initComponents();
    }

    String getHeaderText() {
	StringBuilder str = new StringBuilder();
	ExposeDuLitigeBld bld = new ExposeDuLitigeBld(parentRoot);
	try {
	    bld.build(str);
	    
	} catch (Exception e) {
	    Exceptions.printStackTrace(e);
	    
	}
	return str.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        gUIManager1 = getParentRoot();
        jLabel1 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JTextPane();

        setMinimumSize(new java.awt.Dimension(600, 600));
        setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+3f));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExposeLitigeJPanel.class, "ExposeLitigeJPanel.jLabel1.text")); // NOI18N
        add(jLabel1, java.awt.BorderLayout.PAGE_START);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gUIManager1, org.jdesktop.beansbinding.ELProperty.create("${uniqueId}"), jLabelStatus, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        add(jLabelStatus, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setViewportView(jEditorPane1);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.bi.right.customer.bo.GUIManager gUIManager1;
    private javax.swing.JTextPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<Document> getUndoableDocuments() {
	ArrayList<Document> prj = new ArrayList<Document>();
	prj.add(jEditorPane1.getDocument());

	return prj;
    }

    @Override
    public boolean isNextPossible() {
	if (isEmpty(jEditorPane1)) {
	    return false;
	}
	return true;
    }

    @Override
    public BindingGroup getBindingGroup() {
	return bindingGroup;
    }

    @Override
    public void initJComponents() {
	initComponents();
    }

    public JTextPane getjEditorPaneArg() {
	return jEditorPane1;
    }

    public void setjEditorPaneArg(JTextPane jEditorPaneArg) {
	this.jEditorPane1 = jEditorPaneArg;
    }

    
    private void save() {

	GUIManager parentroot = getParentRoot();
        String argPath = parentroot.getExposeLitige();
	if (argPath == null) {
	    /*try {
		argPath = File.createTempFile("Litige", "expose", new File(parentroot.getPath()).getParentFile()).getPath();
	    } catch (IOException ex) {
		Exceptions.printStackTrace(ex);*/
		argPath = GlobalParameters.getInstance().getWorkDir(parentroot) + "/Litige" + Integer.toHexString(hashCode());
	    /*}*/
	    parentroot.setExposeLitige(argPath);
	}
	if (argPath != null) {
	    File fB = new File(argPath);
	    logger.info(fB+" sauvegarde "+argPath);
		Parallel irreel = new Parallel(jEditorPane1.getDocument(), fB);
		irreel.run();
	}	
    }
}
