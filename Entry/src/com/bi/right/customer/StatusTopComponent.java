/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer;

import com.bi.jsph.model.DemandesTableModel;
import com.bi.right.customer.panel.ConseilJPanel;
import com.bi.right.customer.panel.ContractJPanel;
import com.bi.right.customer.panel.SocieteDefendeurJPanel;
import com.bi.right.customer.panel.SalarieDemandeurJPanel;
import com.bi.right.customer.panel.ExposeLitigeJPanel;
import com.bi.right.customer.panel.SaisineJPanel;
import com.bi.right.customer.util.GlobalParameters;
import com.bi.right.customer.util.MapGenerator;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//com.bi.right.customer//Status//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "StatusTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.bi.right.customer.StatusTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_StatusAction",
preferredID = "StatusTopComponent")
@Messages({
    "CTL_StatusAction=Status",
    "CTL_StatusTopComponent=Status",
    "HINT_StatusTopComponent=Status"
})
public final class StatusTopComponent extends TopComponent  {

    private DemandesTableModel model;
    private File template;

    public StatusTopComponent() {
        initComponents();
        setName(Bundle.CTL_StatusTopComponent());
        setToolTipText(Bundle.HINT_StatusTopComponent());
        // associateLookup(new AbstractLookup(JsphContext.getInstance().getContent()));
        jButtonGen.setEnabled(template != null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gUIManager1 = new com.bi.right.customer.bo.GUIManager();
        buttonGroup1 = new javax.swing.ButtonGroup();
        loaderStorer1 = new com.bi.right.customer.LoaderStorer();
        jDemandeur = new javax.swing.JRadioButton();
        jDefendeur = new javax.swing.JRadioButton();
        jContrat = new javax.swing.JRadioButton();
        jLitige = new javax.swing.JRadioButton();
        jSaisine = new javax.swing.JRadioButton();
        jConclusion = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jContrat1 = new javax.swing.JRadioButton();
        jButtonGen = new javax.swing.JButton();
        jButtonTemplate = new javax.swing.JButton();

        setBackground(Color.white);
        setAutoscrolls(true);
        setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jDemandeur);
        org.openide.awt.Mnemonics.setLocalizedText(jDemandeur, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jDemandeur.text")); // NOI18N
        jDemandeur.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jDemandeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personne.png"))); // NOI18N
        jDemandeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jDemandeurMouseEntered(evt);
            }
        });
        jDemandeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDemandeurActionPerformed(evt);
            }
        });
        add(jDemandeur, new java.awt.GridBagConstraints());

        buttonGroup1.add(jDefendeur);
        org.openide.awt.Mnemonics.setLocalizedText(jDefendeur, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jDefendeur.text")); // NOI18N
        jDefendeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personne.png"))); // NOI18N
        jDefendeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jDefendeurMouseEntered(evt);
            }
        });
        jDefendeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDefendeurActionPerformed(evt);
            }
        });
        add(jDefendeur, new java.awt.GridBagConstraints());

        buttonGroup1.add(jContrat);
        org.openide.awt.Mnemonics.setLocalizedText(jContrat, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jContrat.text")); // NOI18N
        jContrat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/fleche32x32.png"))); // NOI18N
        jContrat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jContratMouseEntered(evt);
            }
        });
        jContrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jContratActionPerformed(evt);
            }
        });
        add(jContrat, new java.awt.GridBagConstraints());

        buttonGroup1.add(jLitige);
        org.openide.awt.Mnemonics.setLocalizedText(jLitige, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jLitige.text")); // NOI18N
        jLitige.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/rond-actif.png"))); // NOI18N
        jLitige.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLitigeMouseEntered(evt);
            }
        });
        jLitige.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLitigeActionPerformed(evt);
            }
        });
        add(jLitige, new java.awt.GridBagConstraints());

        buttonGroup1.add(jSaisine);
        org.openide.awt.Mnemonics.setLocalizedText(jSaisine, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jSaisine.text")); // NOI18N
        jSaisine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/rond-actif.png"))); // NOI18N
        jSaisine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSaisineMouseEntered(evt);
            }
        });
        jSaisine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaisineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        add(jSaisine, gridBagConstraints);

        buttonGroup1.add(jConclusion);
        org.openide.awt.Mnemonics.setLocalizedText(jConclusion, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jConclusion.text")); // NOI18N
        jConclusion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/inactif.png"))); // NOI18N
        jConclusion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jConclusionMouseEntered(evt);
            }
        });
        jConclusion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConclusionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jConclusion, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton2, gridBagConstraints);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(getBackground());
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jTextArea1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 10), new java.awt.Color(204, 204, 204))); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        buttonGroup1.add(jContrat1);
        org.openide.awt.Mnemonics.setLocalizedText(jContrat1, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jContrat1.text")); // NOI18N
        jContrat1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/tribunal32x32.png"))); // NOI18N
        jContrat1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jContrat1MouseEntered(evt);
            }
        });
        jContrat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jContrat1ActionPerformed(evt);
            }
        });
        add(jContrat1, new java.awt.GridBagConstraints());

        org.openide.awt.Mnemonics.setLocalizedText(jButtonGen, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jButtonGen.text")); // NOI18N
        jButtonGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButtonGen, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonTemplate, org.openide.util.NbBundle.getMessage(StatusTopComponent.class, "StatusTopComponent.jButtonTemplate.text")); // NOI18N
        jButtonTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTemplateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButtonTemplate, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GlobalParameters gbp = GlobalParameters.getInstance();
	JFileChooser c = new JFileChooser(new File(gbp.getWorkDir(this.gUIManager1)));
        c.setFileFilter(JSPHProjectFilter.getInstance());
        c.setMultiSelectionEnabled(false);
        int res = c.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            try {

                this.gUIManager1 = this.loaderStorer1.load(c.getSelectedFile());
                model = new DemandesTableModel(this.gUIManager1.getDemandes());

                fillText("Vous venez de charger l'affaire : " + this.gUIManager1.getAffaire() + this.gUIManager1.getUniqueId());
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
                notifyError(ex.getMessage());

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser c = new JFileChooser();
        int res = c.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                this.loaderStorer1.store(this.gUIManager1, c.getSelectedFile());
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
                notifyError(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jDemandeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDemandeurActionPerformed
        openDemandeur();
    }//GEN-LAST:event_jDemandeurActionPerformed

    private void jDemandeurMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDemandeurMouseEntered
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextArea1.setText("Le demandeur c'est celui qui attaque, vous!");
            }
        });
    }//GEN-LAST:event_jDemandeurMouseEntered

    private void jDefendeurMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDefendeurMouseEntered
        // TODO add your handling code here:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextArea1.setText("Le defendeur c'est l'adversaire, la société.");
            }
        });
    }//GEN-LAST:event_jDefendeurMouseEntered

    private void jContratMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jContratMouseEntered

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextArea1.setText("Le contrat de travail qui lie la société et vous sur lequel porte le litige");
            }
        });
    }//GEN-LAST:event_jContratMouseEntered

    private void jLitigeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLitigeMouseEntered
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextArea1.setText("La liste des demandes et prétentions chiffrées ou pas issu du demandeur, ainsi que les prétentions issus du défendeur");
            }
        });
    }//GEN-LAST:event_jLitigeMouseEntered

    private void jSaisineMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSaisineMouseEntered
        fillText("L'action de saisir les prud'hommes pour trancher le litige");

    }//GEN-LAST:event_jSaisineMouseEntered

    private void jConclusionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConclusionMouseEntered
        fillText("L'action de décrire ces demandes avec les arguments de droit en but d' "
                + "éclairer le conseil des prud'hommes sur le litige "
                + "et d'informer l'adversaire pour qu'il puisse répliquer à son tour"
                + " et formuler ces demandes dites reconventionnelles");

    }//GEN-LAST:event_jConclusionMouseEntered

    private void jLitigeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLitigeActionPerformed
        openLitige();
    }//GEN-LAST:event_jLitigeActionPerformed

    private void jContratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jContratActionPerformed
        openContrat();

    }//GEN-LAST:event_jContratActionPerformed

    private void jSaisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaisineActionPerformed
        openSaisine();

    }//GEN-LAST:event_jSaisineActionPerformed

    private void jConclusionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConclusionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jConclusionActionPerformed

    private void jDefendeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDefendeurActionPerformed
        openDefendeur();

    }//GEN-LAST:event_jDefendeurActionPerformed

    private void jContrat1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jContrat1MouseEntered
        fillText("Choisissez le tribunal le plus proche, projetez vous sur plusieurs mois!");
    }//GEN-LAST:event_jContrat1MouseEntered

    private void jContrat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jContrat1ActionPerformed
        openConseil();

    }//GEN-LAST:event_jContrat1ActionPerformed

    private void jButtonGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenActionPerformed
        MapGenerator map = new MapGenerator(gUIManager1);
        File outFile = chooseThat();
        if (outFile != null) {
            try {
                map.generate(template, outFile);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jButtonGenActionPerformed

    private File chooseThat() {
        GlobalParameters gbp = GlobalParameters.getInstance();
	JFileChooser c = new JFileChooser(new File(gbp.getWorkDir(this.gUIManager1)));
        c.setFileFilter(DOCFileFilter.getInstance());
        c.setMultiSelectionEnabled(false);
        int res = c.showSaveDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            return c.getSelectedFile();

        } else {
            return null;
        }
    }

    private void chooseTemplate() {
        GlobalParameters gbp = GlobalParameters.getInstance();
        JFileChooser c = new JFileChooser(new File(gbp.getWorkDir(this.gUIManager1)));
        c.setFileFilter(DOCFileFilter.getInstance());
        c.setMultiSelectionEnabled(false);
        int res = c.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            template = c.getSelectedFile();
            jButtonGen.setEnabled(true);
        } else {
            jButtonGen.setEnabled(template != null);
        }
    }
    private void jButtonTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTemplateActionPerformed
        chooseTemplate();
    }//GEN-LAST:event_jButtonTemplateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private com.bi.right.customer.bo.GUIManager gUIManager1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGen;
    private javax.swing.JButton jButtonTemplate;
    private javax.swing.JRadioButton jConclusion;
    private javax.swing.JRadioButton jContrat;
    private javax.swing.JRadioButton jContrat1;
    private javax.swing.JRadioButton jDefendeur;
    private javax.swing.JRadioButton jDemandeur;
    private javax.swing.JRadioButton jLitige;
    private javax.swing.JRadioButton jSaisine;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private com.bi.right.customer.LoaderStorer loaderStorer1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void notifyError(String errormessage) {
        OpenerJDialog.notifyError(errormessage);
    }

   

    private void fillText(final String str) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextArea1.setText(str);
            }
        });
    }

    private void openDemandeur() {
        SalarieDemandeurJPanel represantant = new SalarieDemandeurJPanel(this.gUIManager1);
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Demandeur").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Demandeur", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }

    private void openLitige() {
        ExposeLitigeJPanel represantant = new ExposeLitigeJPanel(this.gUIManager1, this.model);
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Litige").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Litige", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }

    private void openSaisine() {
        SaisineJPanel represantant = new SaisineJPanel();
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Saisine").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Saisine", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }

    private void openDefendeur() {
        SocieteDefendeurJPanel represantant = new SocieteDefendeurJPanel(this.gUIManager1);
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Defendeur").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Defendeur", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }
    

    private void openConseil() {
        ConseilJPanel represantant = new ConseilJPanel(this.gUIManager1);
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Conseil").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Conseil", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }

    private void openContrat() {
        ContractJPanel represantant = new ContractJPanel(this.gUIManager1);
        ActionListener actionlistener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Logger.getLogger("Contrat").info(e.toString());
            }
        };
        DialogDescriptor dd = new DialogDescriptor(represantant, "Contrat", true, actionlistener);
        Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
        resDls.setVisible(true);
    }
}
