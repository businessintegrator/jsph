/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bi.right.customer;

import com.bi.jsph.model.DemandesTableModel;
import com.bi.jsph.state.StateManager;
import com.bi.jsph.uploa.txns.rw.BusinessClass;
import com.bi.right.customer.bo.GUIManager;
import com.bi.right.customer.panel.AbstractPanel;
import com.bi.right.customer.panel.ConseilJPanel;
import com.bi.right.customer.panel.ContractJPanel;
import com.bi.right.customer.panel.DemandesJPanel;
import com.bi.right.customer.panel.ExposeLitigeJPanel;
import com.bi.right.customer.panel.PiecesJPanel;
import com.bi.right.customer.panel.SaisineJPanel;
import com.bi.right.customer.panel.SalarieDemandeurJPanel;
import com.bi.right.customer.panel.SocieteDefendeurJPanel;
import com.bi.right.customer.util.TopSavable;
import com.bi.right.customer.util.xslt.ParallelTransformers;
import com.bi.right.state.StateManager_;
import com.bi.right.state.Stateview;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.net.URISyntaxException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//com.bi.right.customer//Project//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "ProjectTopComponent",
iconBase = "com/bi/right/customer/jsph16x16.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.bi.right.customer.ProjectTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ProjectAction",
preferredID = "ProjectTopComponent")
@Messages({
    "CTL_ProjectAction=Project",
    "CTL_ProjectTopComponent=Project Window",
    "HINT_ProjectTopComponent=This is a Project window"
})
public final class ProjectTopComponent extends AbstractJsphTopComponent<GUIManager> {
    static{
    try {
	for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		System.out.println("\tlook n feel = "+info.getName());
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(OpenerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(OpenerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(OpenerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(OpenerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
    }

    private static Map<Date, BusinessClass> BUSINESSCLASS = null;

    public static void licContext(Map<Date, BusinessClass> l___) {
	BUSINESSCLASS = l___;
    }
//extends   AbstractJsphTopComponent<GUIManager> {
    private GUIManager project = null;
    private StateManager_ stateMgr = null;
    private DemandesTableModel model;
    private StateManager stateManager;
    private OpenerJDialog modalPopupWizard;
    // private final TopSavable<GUIManager> impl;
    private Map<String, AbstractPanel> abstractPans = new HashMap<String, AbstractPanel>();
    private PiecesJPanel piecesPanel;

    public ProjectTopComponent(GUIManager project,DemandesTableModel model) {
	this.project = project;
	this.model = model;
	fillThem();
    }

    
    
    public ProjectTopComponent() {
	fillThem();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        stateviewMain = new com.bi.right.state.Stateview();
        buttonGroupDem = new javax.swing.ButtonGroup();
        buttonGroupFleche = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        JLabelProjet = new javax.swing.JLabel();
        jLabelDossierInscription = new javax.swing.JLabel();
        jLabelSasine = new javax.swing.JLabel();
        jLabelAudience = new javax.swing.JLabel();
        jLabelConclusionDemandeur = new javax.swing.JLabel();
        jLabelConclusionAdverse = new javax.swing.JLabel();
        jLabelOrdonnance = new javax.swing.JLabel();
        jLabelRecours1 = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jRadioButtonDemandeur = new javax.swing.JRadioButton();
        jRadioButtonDefendeur = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabelSaisir = new javax.swing.JLabel();
        jLabelConcliusionDemande = new javax.swing.JLabel();
        jLabelConclusionDefense = new javax.swing.JLabel();
        jLabelContrat = new javax.swing.JLabel();
        jLabelPieces = new javax.swing.JLabel();
        jLabelPiecesDefendeur = new javax.swing.JLabel();
        jLabelDemandesDemandeur = new javax.swing.JLabel();
        jLabelDemandesReconv = new javax.swing.JLabel();
        jLabelExposeduLitige = new javax.swing.JLabel();
        jLabelExposeduLitige1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(JLabelProjet, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.JLabelProjet.text")); // NOI18N

        jLabelDossierInscription.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelDossierInscription, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelDossierInscription.text")); // NOI18N
        jLabelDossierInscription.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_SAISINE}"), jLabelDossierInscription, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelDossierInscription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelSasine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelSasine, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelSasine.text")); // NOI18N
        jLabelSasine.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_ROLE}"), jLabelSasine, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelSasine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelAudience.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelAudience, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelAudience.text")); // NOI18N
        jLabelAudience.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_ACK_DEFENDEUR}"), jLabelAudience, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelAudience.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelConclusionDemandeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelConclusionDemandeur, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelConclusionDemandeur.text")); // NOI18N
        jLabelConclusionDemandeur.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_CONCLUSIONS}"), jLabelConclusionDemandeur, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelConclusionDemandeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelConclusionAdverse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelConclusionAdverse, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelConclusionAdverse.text")); // NOI18N
        jLabelConclusionAdverse.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_CONCLUSIONSRECO}"), jLabelConclusionAdverse, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelConclusionAdverse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelOrdonnance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelOrdonnance, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelOrdonnance.text")); // NOI18N
        jLabelOrdonnance.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_JUGEE}"), jLabelOrdonnance, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelOrdonnance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusMouseExited(evt);
            }
        });

        jLabelRecours1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/rond/droite-inactif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelRecours1, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelRecours1.text")); // NOI18N
        jLabelRecours1.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelRecours1.toolTipText")); // NOI18N
        jLabelRecours1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stateviewMain, org.jdesktop.beansbinding.ELProperty.create("${z_RECOURS}"), jLabelRecours1, org.jdesktop.beansbinding.BeanProperty.create("name"));
        bindingGroup.addBinding(binding);

        jLabelRecours1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelRecours1statusMousEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelRecours1statusMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(JLabelProjet, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDossierInscription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSasine, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelAudience)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelConclusionDemandeur, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelConclusionAdverse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdonnance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRecours1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(JLabelProjet, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelDossierInscription)
                .addComponent(jLabelSasine)
                .addComponent(jLabelAudience)
                .addComponent(jLabelConclusionDemandeur)
                .addComponent(jLabelConclusionAdverse)
                .addComponent(jLabelOrdonnance)
                .addComponent(jLabelRecours1))
        );

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setAutoscrolls(true);

        buttonGroupDem.add(jRadioButtonDemandeur);
        jRadioButtonDemandeur.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButtonDemandeur, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jRadioButtonDemandeur.text")); // NOI18N
        jRadioButtonDemandeur.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jRadioButtonDemandeur.toolTipText")); // NOI18N
        jRadioButtonDemandeur.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personnedisable.png"))); // NOI18N
        jRadioButtonDemandeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personne.png"))); // NOI18N
        jRadioButtonDemandeur.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personneover.png"))); // NOI18N
        jRadioButtonDemandeur.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personeover.png"))); // NOI18N
        jRadioButtonDemandeur.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personegreen.png"))); // NOI18N
        jRadioButtonDemandeur.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonDemandeur.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonDemandeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonDemandeurMouseClicked(evt);
            }
        });

        buttonGroupDem.add(jRadioButtonDefendeur);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButtonDefendeur, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jRadioButtonDefendeur.text")); // NOI18N
        jRadioButtonDefendeur.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jRadioButtonDefendeur.toolTipText")); // NOI18N
        jRadioButtonDefendeur.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personnedisable.png"))); // NOI18N
        jRadioButtonDefendeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personne.png"))); // NOI18N
        jRadioButtonDefendeur.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personeover.png"))); // NOI18N
        jRadioButtonDefendeur.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personneover.png"))); // NOI18N
        jRadioButtonDefendeur.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/personegreen.png"))); // NOI18N
        jRadioButtonDefendeur.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonDefendeur.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonDefendeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonDefendeurMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jCheckBox1.text")); // NOI18N
        jCheckBox1.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jCheckBox1.toolTipText")); // NOI18N
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/cph.png"))); // NOI18N
        jCheckBox1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jLabelSaisir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/fleche/droite-actif.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelSaisir, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelSaisir.text")); // NOI18N
        jLabelSaisir.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelSaisir.toolTipText")); // NOI18N
        jLabelSaisir.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/fleche/droite-inactif.png"))); // NOI18N
        jLabelSaisir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabelSaisir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelSaisirMouseClicked(evt);
            }
        });

        jLabelConcliusionDemande.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/adroite-vert.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelConcliusionDemande, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelConcliusionDemande.text")); // NOI18N
        jLabelConcliusionDemande.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/adroite-gris.png"))); // NOI18N
        jLabelConcliusionDemande.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButtonDemandeur, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabelConcliusionDemande, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabelConcliusionDemande.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelConcliusionDemandeMouseClicked(evt);
            }
        });

        jLabelConclusionDefense.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelConclusionDefense.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/agauche-vert.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelConclusionDefense, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelConclusionDefense.text")); // NOI18N
        jLabelConclusionDefense.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelConclusionDefense.toolTipText")); // NOI18N
        jLabelConclusionDefense.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/empty/agauche-gris.png"))); // NOI18N
        jLabelConclusionDefense.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButtonDefendeur, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabelConclusionDefense, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabelContrat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelContrat, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelContrat.text")); // NOI18N
        jLabelContrat.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelContrat.toolTipText")); // NOI18N
        jLabelContrat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelContratMouseClicked(evt);
            }
        });

        jLabelPieces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelPieces, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelPieces.text")); // NOI18N
        jLabelPieces.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelPieces.toolTipText")); // NOI18N
        jLabelPieces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPiecesMouseClicked(evt);
            }
        });

        jLabelPiecesDefendeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelPiecesDefendeur, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelPiecesDefendeur.text")); // NOI18N
        jLabelPiecesDefendeur.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelPiecesDefendeur.toolTipText")); // NOI18N
        jLabelPiecesDefendeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPiecesDefendeurMouseClicked(evt);
            }
        });

        jLabelDemandesDemandeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelDemandesDemandeur, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelDemandesDemandeur.text")); // NOI18N
        jLabelDemandesDemandeur.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelDemandesDemandeur.toolTipText")); // NOI18N
        jLabelDemandesDemandeur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelDemandesDemandeurMouseClicked(evt);
            }
        });

        jLabelDemandesReconv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelDemandesReconv, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelDemandesReconv.text")); // NOI18N
        jLabelDemandesReconv.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelDemandesReconv.toolTipText")); // NOI18N
        jLabelDemandesReconv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelDemandesReconvMouseClicked(evt);
            }
        });

        jLabelExposeduLitige.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelExposeduLitige, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelExposeduLitige.text")); // NOI18N
        jLabelExposeduLitige.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelExposeduLitige.toolTipText")); // NOI18N
        jLabelExposeduLitige.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelExposeduLitigeMouseClicked(evt);
            }
        });

        jLabelExposeduLitige1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bi/right/customer/loupe32x32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelExposeduLitige1, org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelExposeduLitige1.text")); // NOI18N
        jLabelExposeduLitige1.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jLabelExposeduLitige1.toolTipText")); // NOI18N
        jLabelExposeduLitige1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelExposeduLitige1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jRadioButtonDemandeur, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSaisir)
                            .addComponent(jLabelContrat))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonDefendeur))
                    .addComponent(jLabelConcliusionDemande)
                    .addComponent(jLabelConclusionDefense)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelPiecesDefendeur)
                        .addGap(4, 4, 4)
                        .addComponent(jLabelDemandesReconv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelExposeduLitige1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelPieces)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDemandesDemandeur)
                        .addGap(30, 30, 30)
                        .addComponent(jLabelExposeduLitige)))
                .addContainerGap(5150, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jRadioButtonDefendeur))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(80, 80, 80)
                                    .addComponent(jLabelSaisir)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelContrat))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addComponent(jRadioButtonDemandeur))))
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDemandesDemandeur)
                            .addComponent(jLabelPieces)
                            .addComponent(jLabelExposeduLitige))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabelConcliusionDemande)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelDemandesReconv)
                        .addComponent(jLabelExposeduLitige1))
                    .addComponent(jLabelPiecesDefendeur))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelConclusionDefense)
                .addGap(462, 462, 462))
        );

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(ProjectTopComponent.class, "ProjectTopComponent.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.LINE_START);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

   /* private void openConclusion() {
	showWizard(OpenerJDialog.CONCLUSION);
    }*/

    void fillWizardList(List<AbstractPanelRef> wizardList) {
	for (Iterator<AbstractPanelRef> it = wizardList.iterator(); it.hasNext();) {
	    AbstractPanel abstractPanelRef = it.next().getInternal();
	    abstractPans.put(abstractPanelRef.getName(), abstractPanelRef);
	}
    }

    private void resetGUIManager() {
	this.modalPopupWizard = null;
	this.abstractPans.clear();

	impl.setT2save(project);
	impl.setBaseDirectory(dirof(this.project));
	super.setDemandesTableModel(model);

	if (project != null) {
	    Stateview stateView = stateMgr.dossierComplet(project);
	    stateManager.setStateView(stateView);
	    stateManager.mapAll();
	}
    }

    private String dirof(GUIManager project1)  {
	String path = null;
	if (project1 != null) {path = project1.getPath();}
	if (path == null) {
	    try {
		File tmpFil = File.createTempFile(".jsph", "work");
		tmpFil.mkdirs();
		path = tmpFil.getPath();
	    } catch (IOException ex) {
		Exceptions.printStackTrace(ex);
	    }
	}
	File f = new File(path);
	if (f.isDirectory()) {
	    return f.getPath();
	} else {
	    return f.getParent();
	}
    }


    private String buildPiecesName() {
	return Integer.toHexString(this.project.hashCode());
    }

    private boolean opentab(final AbstractPanel ppanel, String theName) {
	/*if (checkUsage()) {return false;}
	DiscussionTopComponentTopComponent topDisc = new DiscussionTopComponentTopComponent();
	topDisc.setName(theName);
	topDisc.add(ppanel,BorderLayout.CENTER);
	topDisc.open();
	if (false)*/{
	DisplayerListener actionlistener = new DisplayerListener(ppanel);
	DialogDescriptor dd = new DialogDescriptor(ppanel, theName, true,new Object [] {"OK","CANCEL"},"OK",0,null, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	actionlistener.setDlg(resDls);
	resDls.setVisible(true);

	}
	return false;
    }

    private void openExposeLitige() {
	if (!checkUsage()){
	    
	     ExposeLitigeJPanel exp = new ExposeLitigeJPanel(project, model,this.piecesPanel);
	     opentab(exp, "Exposé du Litige");
	    
	    
	}
    }

    private void openPiecesDefendeur() {
	PiecesJPanel p = new PiecesJPanel();
	p.setCurrentDirectory(project);
	if (project.getRecopiecesPath() == null){
	    File file  = new File (new File (this.project.getPath()).getParent()+"/"+
			buildPiecesName()+".pjsph");
	    project.setRecopiecesPath(file.getPath());
	}
	p.setLastFile(new File(project.getRecopiecesPath()));
	if (!checkUsage()){opentab(p, TOOL_TIP_TEXT_KEY);}
	
    }
    private class DisplayerListener implements ActionListener{
	private Dialog dlg;
	private WeakReference<AbstractPanel> panel;

	public DisplayerListener(AbstractPanel thepanel) {
	    panel = new WeakReference<AbstractPanel>(thepanel);
	}
	
	
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if ("OK".equals(e.getActionCommand())){
		    AbstractPanel pInternal = panel.get();
		    pInternal.proceedSave();	    
		} else {
		}
		dlg.setVisible(false);
		
	    }

	private void setDlg(Dialog resDls) {
	    this.dlg =  resDls;
	}
	
	
    }

    private boolean checkUsage() {
	if (model == null || project == null) {
	    projectUsage();
	    return true;
	}
	return false;
    }

    private void openDemandesDefendeur() {
	if (checkUsage()) return;
	DemandesJPanel reconv = new DemandesJPanel(project,new DemandesTableModel(project.getReconv()));
	if (opentab(reconv, "Demandes reconventionnelles")){
	 return;
	}
	//String path = project.getPath();
	//DemandesJPanel conclusionDefense = new DemandesJPanel(project, model)
	
    }

    private void fillThem() {
	initComponents();
	impl = new TopSavable<GUIManager>(this.project, new InstanceContent(), dirof(this.project), "Affaire");
	setName(this.project.getAffaire());
	setToolTipText(Bundle.HINT_ProjectTopComponent());
	putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
	putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
	putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
	stateManager = new StateManager();
	stateMgr = new StateManager_();
	associateLookup(new AbstractLookup(impl.getContent()));
    }

    public enum ICON {

	ERROR(new javax.swing.ImageIcon(ICON.class.getClassLoader().getResource("/resources/empty/error.png"))),
	ACTIF(new javax.swing.ImageIcon(ICON.class.getClassLoader().getResource("/resources/empty/actif.png"))),
	INACTIF(new javax.swing.ImageIcon(ICON.class.getClassLoader().getResource("/resources/empty/inactif.png"))),
	WAITING(new javax.swing.ImageIcon(ICON.class.getClassLoader().getResource("/resources/empty/waiting.png")));
	private javax.swing.ImageIcon icon;
	private int direction = 0;

	public ImageIcon getIcon() {
	    return icon;
	}

	private ICON(ImageIcon icon, int thedirection) {
	    this.icon = icon;
	    this.direction = thedirection;
	}

	private ICON(ImageIcon icon) {
	    this(icon, 0);
	}
    }
    private void statusMousEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusMousEntered
	if (evt.getSource() instanceof JLabel) {
	    JLabel label = (JLabel) evt.getSource();
	    calculateIcon(label);
	    fillHelpText(label.getText() + " ");
	}
    }//GEN-LAST:event_statusMousEntered
    private static Map<String, javax.swing.ImageIcon> ICON8CACHE = new HashMap<String, javax.swing.ImageIcon>();

    private void calculateIcon(JLabel label) {
	if (label.getName() == null) {
	    NotifyDescriptor nd = new NotifyDescriptor.Message("Pas de nom pour le bouton " + label);
	    DialogDisplayer.getDefault().notify(nd);
	    return;
	}
	String icnoPath = stateManager.getResources("/resources/rond/", label.getName(), ".png");
	if (label != null) {
	    javax.swing.ImageIcon ic = ICON8CACHE.get(icnoPath);
	    if (ic == null) {
		ic = new javax.swing.ImageIcon(getClass().getResource(icnoPath));
		ICON8CACHE.put(icnoPath, ic);
	    }
	    label.setIcon(ic);
	}

    }
    private void statusMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusMouseExited
	if (evt.getSource() instanceof JLabel) {
	    JLabel label = (JLabel) evt.getSource();
	    calculateIcon(label);
	}
    }//GEN-LAST:event_statusMouseExited

    private void jLabelRecours1statusMousEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRecours1statusMousEntered
	// TODO add your handling code here:
    }//GEN-LAST:event_jLabelRecours1statusMousEntered

    private void jLabelRecours1statusMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRecours1statusMouseExited
	fillHelpText("L'ordonnance de jugement vous donne vos voies de recours");
	calculateIcon(jLabelRecours1);
    }//GEN-LAST:event_jLabelRecours1statusMouseExited

    private void jLabelSaisirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSaisirMouseClicked
	// TODO add your handling code here:
	if (evt.getClickCount() == 2) {
	    openSaisine();
	}
    }//GEN-LAST:event_jLabelSaisirMouseClicked

    private void showWizard(int step) {
	if (modalPopupWizard == null) {
	    modalPopupWizard = new OpenerJDialog(WindowManager.getDefault().getMainWindow(), true, getProject(), getModel());
	}
	modalPopupWizard.gotoTheStep(step);
	modalPopupWizard.setVisible(true);
    }

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
	// TODO add your handling code here: if (evt.getClickCount() == 2) {
	if (evt.getClickCount()  >= 2) {
	    openConseil();

	}

    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jLabelContratMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelContratMouseClicked
	// TODO add your handling code here:
	if (evt.getClickCount() >= 1) {
	    openContrat();
	}
    }//GEN-LAST:event_jLabelContratMouseClicked

    private void jLabelConcliusionDemandeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelConcliusionDemandeMouseClicked
	if (evt.getClickCount()>= 1){
	    try {
		String t =  File.createTempFile("jsph", ".txt").getPath();
			new ParallelTransformers().transformXML(this.project.getPath(),t);
		//openDemandes();
		openUrl("file:///"+t.replace('\\', '/'));
	    } catch (IOException ex) {
		Exceptions.printStackTrace(ex);
	    }
	}

    }//GEN-LAST:event_jLabelConcliusionDemandeMouseClicked

    void openUrl(String url_) {
	String url = url_;
	if (url == null) {
	    url = "www.jsph.fr";
	}
	if (java.awt.Desktop.isDesktopSupported()) {
	    java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
	    if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
		try {
		    java.net.URI uri = new java.net.URI(url);
		    desktop.browse(uri);
		} catch (IOException ex) {
		    Exceptions.printStackTrace(ex);
		} catch (URISyntaxException ex) {
		    Exceptions.printStackTrace(ex);
		}
	    } else {
	    notifyError("Veuillez configurer un navigateur par défaut pour ouvrir la page:"+url);
	    
	    }
	}
    }
    
    private void jLabelPiecesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPiecesMouseClicked
        // TODO add your handling code here:
	if (evt.getClickCount()>= 1){
	    if (this.project == null) { projectUsage();return ;}
	    String path = this.project.getPiecesPath();
	    
	    
	    if (path == null){
		notifyError("La fenêtre d'ajout des pièces et preuves");
		File file  = new File (new File (this.project.getPath()).getParent()+"/"+
			buildPiecesName()+".pjsph");
		path = file.getPath();
	    } 
	   
	    this.project.setPiecesPath(path);
	    DocumentListTopComponent doc = DocumentListTopComponent.getInstance();
	    doc.setName("Liste des preuves (pièces)" +path);
	    doc.initPieces(this.project,path);
	    doc.open();
	    this.piecesPanel = doc.getPiecesPanel();
	}
    }//GEN-LAST:event_jLabelPiecesMouseClicked

    private void jRadioButtonDemandeurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonDemandeurMouseClicked
        // TODO add your handling code here:
	if (evt.getClickCount() >= 1){
	  openDemandeur();
	}
    }//GEN-LAST:event_jRadioButtonDemandeurMouseClicked

    private void jRadioButtonDefendeurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonDefendeurMouseClicked
        // TODO add your handling code here:
	if (evt.getClickCount() >= 1){
	    openDefendeur();
	}
    }//GEN-LAST:event_jRadioButtonDefendeurMouseClicked

    private void jLabelPiecesDefendeurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPiecesDefendeurMouseClicked
        // TODO add your handling code here:
		if (evt.getClickCount() >= 1){
		 openPiecesDefendeur();
		}

    }//GEN-LAST:event_jLabelPiecesDefendeurMouseClicked

    private void jLabelDemandesDemandeurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDemandesDemandeurMouseClicked
        if (evt.getClickCount() >= 1){
		 openDemandes();
	}
    }//GEN-LAST:event_jLabelDemandesDemandeurMouseClicked

    private void jLabelDemandesReconvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDemandesReconvMouseClicked
         if (evt.getClickCount() >= 1){
		 openDemandesDefendeur();
	}
    }//GEN-LAST:event_jLabelDemandesReconvMouseClicked

    private void jLabelExposeduLitigeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExposeduLitigeMouseClicked
        if (evt.getClickCount() >= 1){
		 openExposeLitige();
	}
    }//GEN-LAST:event_jLabelExposeduLitigeMouseClicked

    private void jLabelExposeduLitige1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExposeduLitige1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelExposeduLitige1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelProjet;
    private javax.swing.ButtonGroup buttonGroupDem;
    private javax.swing.ButtonGroup buttonGroupFleche;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabelAudience;
    private javax.swing.JLabel jLabelConcliusionDemande;
    private javax.swing.JLabel jLabelConclusionAdverse;
    private javax.swing.JLabel jLabelConclusionDefense;
    private javax.swing.JLabel jLabelConclusionDemandeur;
    private javax.swing.JLabel jLabelContrat;
    private javax.swing.JLabel jLabelDemandesDemandeur;
    private javax.swing.JLabel jLabelDemandesReconv;
    private javax.swing.JLabel jLabelDossierInscription;
    private javax.swing.JLabel jLabelExposeduLitige;
    private javax.swing.JLabel jLabelExposeduLitige1;
    private javax.swing.JLabel jLabelOrdonnance;
    private javax.swing.JLabel jLabelPieces;
    private javax.swing.JLabel jLabelPiecesDefendeur;
    private javax.swing.JLabel jLabelRecours1;
    private javax.swing.JLabel jLabelSaisir;
    private javax.swing.JLabel jLabelSasine;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonDefendeur;
    private javax.swing.JRadioButton jRadioButtonDemandeur;
    private javax.swing.JTabbedPane jTabbedPane;
    private com.bi.right.state.Stateview stateviewMain;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    javax.swing.JLabel[] getListLabel() {
	return new javax.swing.JLabel[]{
		    jLabelAudience,
		    jLabelConclusionAdverse,
		    jLabelConclusionDemandeur,
		    jLabelDossierInscription,
		    jLabelOrdonnance,
		    jLabelRecours1,
		    jLabelSasine,};
    }

    @Override
    public void componentOpened() {
	// TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
	// TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
	// better to version settings since initial version as advocated at
	// http://wiki.apidesign.org/wiki/PropertyFiles
	p.setProperty("version", "1.0");
	// TODO store your settings
    }

    void readProperties(java.util.Properties p) {
	String version = p.getProperty("version");
	// TODO read your settings according to their version
    }

    private void fillHelpText(String helptext) {
	//this.jTextArea1.setText(helptext);
    }

    public GUIManager getProject() {
	return project;
    }

    public void setProject(GUIManager pproject) {
	this.project = pproject;
	resetGUIManager();


    }

    private void openDemandeur() {
	if (this.project == null) {
	    projectUsage();
	    return;
	}
	final SalarieDemandeurJPanel ppanel = new SalarieDemandeurJPanel(this.project);
	//
	if (opentab(ppanel,"Demandeur")) {
	    return;
	}
	/*ActionListener actionlistener = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if (ppanel.isNextPossible()) {
		    fillHelpText("Demandeur.Tous les champs obligatoires sont remplis!");
		} else {
		    fillHelpText("Demandeur. Il manque des champs!");
		}

		stateManager.setColor(jLabelDossierInscription.getName(), ppanel.getCompleteness());
	    }
	};
	DialogDescriptor dd = new DialogDescriptor(ppanel, "Demandeur", true, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	resDls.setVisible(true);*/

    }

    private void openLitige() {
	if (this.project == null) {
	    projectUsage();
	    return;
	}
	final ExposeLitigeJPanel ppanel = new ExposeLitigeJPanel(this.project, this.model);
	//
if (opentab(ppanel,"Exposé du litige")) {
	    return;
	}
	/*ActionListener actionlistener = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if (ppanel.isNextPossible()) {
		    fillHelpText("Résumé de la saisine.Tous les champs obligatoires sont remplis!");
		} else {
		    fillHelpText("Résumé de la saisine. Il manque des champs!");
		}

		stateManager.setColor(jLabelDossierInscription.getName(), ppanel.getCompleteness());
	    }
	};
	DialogDescriptor dd = new DialogDescriptor(ppanel, "Litige", true, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	resDls.setVisible(true);*/
    }

    private void openSaisine() {
	
	if (this.project == null) {
	    projectUsage();
	    return;
	}
	AbstractPanel ppanel = new SaisineJPanel(this.project);
	if (opentab(ppanel,"Saisine")) {
	    return;
	}


    }

    private void openDefendeur() {
	if (this.project == null) {
	    projectUsage();
	    return;
	}
	//todo si salarié
	SocieteDefendeurJPanel ppanel = new SocieteDefendeurJPanel(this.project);
	//
if (opentab(ppanel,"Defendeur")) {
	    return;
	}
	/*ActionListener actionlistener = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if (ppanel.isNextPossible()) {
		    fillHelpText("Choix du defendeur.Tous les champs obligatoires sont remplis!");
		} else {
		    fillHelpText("Choix du defendeur. Il manque des champs!");
		}

		stateManager.setColor(jLabelDossierInscription.getName(), ppanel.getCompleteness());
	    }
	};
	DialogDescriptor dd = new DialogDescriptor(ppanel, "Defendeur", true, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	resDls.setVisible(true);*/
    }

    private void openConseil() {
	if (this.project == null) {
	    projectUsage();
	    return;
	}
	final ConseilJPanel ppanel = new ConseilJPanel(this.project);
	if (opentab(ppanel,"CPH")) {
	    return;
	}
	/*ActionListener actionlistener = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if (ppanel.isNextPossible()) {
		    fillHelpText("Choix du CPH.Tous les champs obligatoires sont remplis!");
		} else {
		    fillHelpText("Choix du CPH. Il manque des champs!");
		}
		stateManager.setColor(jLabel2.getName(), ppanel.getCompleteness());

	    }
	};
	DialogDescriptor dd = new DialogDescriptor(ppanel, "Conseil", true, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	resDls.setVisible(true);*/

    }

    public DemandesTableModel getModel() {
	return model;
    }

    public void setModel(DemandesTableModel model) {
	this.model = model;
    }

    public void init() {
	//initComponents();
	this.JLabelProjet.setText("Projet : " + this.project.getAffaire());
	JLabel[] labels = getListLabel();
	for (int i = 0; i < labels.length; i++) {
	    JLabel object = labels[i];
	    calculateIcon(object);
	}
    }

    private void openDemandes() {
	if (checkUsage()) return;
	final DemandesJPanel ppanel = new DemandesJPanel(this.project, this.model);
	if (opentab(ppanel,"Griefs ou Demandes")) {
	    return;
	}
    }

    private void openContrat() {
	if (checkUsage()) return;
	final ContractJPanel ppanel = new ContractJPanel(this.project);
        if (opentab(ppanel,"Contrat")) {
	    return;
	}
	/*ActionListener actionlistener = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		if (ppanel.isNextPossible()) {
		    fillHelpText("Choix du CPH.Tous les champs obligatoires sont remplis!");
		} else {
		    fillHelpText("Choix du CPH. Il manque des champs!");
		}

		//stateManager.setColor(jLabelContrat.getName(), ppanel.getCompleteness());
	    }
	};
	DialogDescriptor dd = new DialogDescriptor(ppanel, "Contrat", true, actionlistener);
	Dialog resDls = DialogDisplayer.getDefault().createDialog(dd);
	resDls.setVisible(true);*/
    }

    private void projectUsage() {
	notifyError("Ouvrir un projet ou créer une nouvelle affaire.");
    }

    static void notifyError(String errormessage) {

	NotifyDescriptor.Confirmation message = new NotifyDescriptor.Confirmation(errormessage, NotifyDescriptor.ERROR_MESSAGE);
	DialogDisplayer.getDefault().notify(message);


    }

    private void openDemandesTab() {
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		DemandesJPanel ppanel = new DemandesJPanel(project, model);
		if (opentab(ppanel,"Demandes")) {
		 return;
		}

	    }
	});
    }
    
    
        private DiscussionTopComponentTopComponent openTopComponents() {
	Set<? extends Mode> modes = WindowManager.getDefault().getModes();
	for (Iterator<? extends Mode> it = modes.iterator(); it.hasNext();) {
	    Mode mode = it.next();
	    TopComponent[] top = WindowManager.getDefault().getOpenedTopComponents(mode);
	    for (int i = 0; i < top.length; i++) {
		TopComponent topComponent = top[i];
		
		if (topComponent instanceof DiscussionTopComponentTopComponent){
		    DiscussionTopComponentTopComponent prj = (DiscussionTopComponentTopComponent)topComponent;
		    return prj;
		}
		
	    }
	 
	}
	return null;
    }
}
